"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authRouter = void 0;
const express_1 = require("express");
const controller_1 = require("../controller");
const action_token_type_enum_1 = require("../enums/action-token-type-enum");
const middlewares_1 = require("../middlewares");
const common_middleware_1 = require("../middlewares/common.middleware");
const valitors_1 = require("../valitors");
const router = (0, express_1.Router)();
router.post("/register", middlewares_1.userMiddleware.isUserValidCreate, middlewares_1.userMiddleware.getDyamicallyAndThrow("email"), controller_1.authController.register);
router.post("/login", middlewares_1.userMiddleware.isUserValidLogin, middlewares_1.userMiddleware.getDyamicallyOrThrow("email"), controller_1.authController.login);
router.post("/password/change", middlewares_1.userMiddleware.isValidChangePassword, middlewares_1.authMiddleware.checkAccessToken, controller_1.authController.changePassword);
router.post("/refresh", middlewares_1.authMiddleware.checkRefreshToken, controller_1.authController.refresh);
router.post("/password/forgot", common_middleware_1.commonMiddleware.isBodyValid(valitors_1.UserValidator.emailValidator), middlewares_1.userMiddleware.getDyamicallyOrThrow("email"), controller_1.authController.forgotPassword);
router.put("/password/forgot/:token", middlewares_1.authMiddleware.checkActionToken(action_token_type_enum_1.EActionTokenType.forgot), middlewares_1.authMiddleware.checkOldPassword, controller_1.authController.setForgotPassword);
router.post("/activate", common_middleware_1.commonMiddleware.isBodyValid(valitors_1.UserValidator.emailValidator), middlewares_1.userMiddleware.getDyamicallyOrThrow("email"), controller_1.authController.sendActiveToken);
router.put("/activate/:token", middlewares_1.authMiddleware.checkActionToken(action_token_type_enum_1.EActionTokenType.activate), controller_1.authController.activate);
router.post("/login");
exports.authRouter = router;
